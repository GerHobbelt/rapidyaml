!yamlscript/v0:

:: use(common)
:: workflow-setup()
gcc-setup =: load('share/gcc-setup.yaml')
common-steps =: load('share/steps.yaml')

env:
  PROJ_PFX_TARGET: ryml-
  PROJ_PFX_CMAKE: RYML_
  CMAKE_FLAGS: -DRYML_TEST_SUITE=ON
  NUM_JOBS_BUILD: # 4

jobs:
  #----------------------------------------------------------------------------
  gcc_canary:
    name: gcc_canary/${{matrix.cxx}}/c++${{matrix.std}}/${{matrix.bt}}
    continue-on-error: true
    if: always()  # https://stackoverflow.com/a/62112985/721703
    runs-on: ubuntu-latest
    container: ghcr.io/biojppm/c4core/${{matrix.img}}:latest

    strategy:
      fail-fast: false
      matrix:
        item =:
          \({:std %1, :cxx "g++-$a(%2)", :bt %3,
             :bitlinks 'shared64 static32',
             :img "ubuntu$a(%4)"})
        include: &include1
        - ! item(11  14 'Debug'   '22.04')
        - ! item(11  14 'Release' '22.04')
        - ! item(20  14 'Debug'   '22.04')
        - ! item(20  14 'Release' '22.04')
        - ! item(11   5 'Debug'   '18.04')
        - ! item(11   5 'Release' '18.04')
        - ! item(11 4.8 'Debug'   '18.04')
        - ! item(11 4.8 'Release' '18.04')

    env:: load('share/env.yaml')

    steps:: gcc-setup + common-steps

  #----------------------------------------------------------------------------
  gcc_O2: # see https://github.com/biojppm/rapidyaml/issues/440
    name: gcc_O2/${{matrix.cxx}}/c++${{matrix.std}}
    continue-on-error: true
    if: always()
    runs-on: ubuntu-latest
    container: ghcr.io/biojppm/c4core/ubuntu22.04:latest

    strategy:
      fail-fast: false
      matrix:
        include:
        - {std: 11, gcc: 12 , bt: Release}

    env:: load('share/env.yaml') + {'CXX_' '${{matrix.gcc}}'}

    steps:
    - name: checkout
      uses: actions/checkout@v4
      with: {submodules: recursive}
    - run: git config --system --add safe.directory '*'
    - run: c4core-install g++-${{matrix.gcc}}
    - name: show info
      run: source .github/setenv.sh && c4_show_info
    - name: configure
      run:: bash('gcc-configure')
    - name: build
      run:
        cmake --build build_o2 --target ryml-test-build -j --verbose
    - name: run
      run:
        cmake --build build_o2 --target ryml-test-run

  #----------------------------------------------------------------------------
  gcc_tabtokens:
    name: gcc_canary/${{matrix.cxx}}/c++${{matrix.std}}/${{matrix.bt}}
    continue-on-error: true
    if: always()
    runs-on: ubuntu-latest
    container: ghcr.io/biojppm/c4core/${{matrix.img}}:latest

    strategy:
      fail-fast: false
      matrix:
        include: *include1

    env:: load('share/env.yaml') + {'CMAKE_FLAGS' '-DRYML_WITH_TAB_TOKENS=ON'}

    steps:: gcc-setup + common-steps

  #----------------------------------------------------------------------------
  gcc_noexceptions:
    name: gcc_noexceptions/${{matrix.cxx}}/c++${{matrix.std}}/${{matrix.bt}}
    continue-on-error: true
    if: always()
    runs-on: ubuntu-latest
    container: ghcr.io/biojppm/c4core/${{matrix.img}}:latest

    strategy:
      fail-fast: false
      matrix:
        item =:
          \({:std %1, :cxx "g++-$a(%2)", :bt %3,
             :bitlinks 'shared64 static32', :img "ubuntu$a(%4)"})
        include:
        - ! item(11 5  'Debug'   '18.04')
        - ! item(11 5  'Release' '18.04')
        - ! item(20 14 'Debug'   '22.04')
        - ! item(20 14 'Release' '22.04')

    env:: -{'CXXFLAGS' '-fno-exceptions -fno-rtti'} + load('share/env.yaml')

    steps:
    # cannot use the checkout@v3 or v4 action on ubuntu18.04 because of nodejs
    # version
   #- name: checkout, uses: actions/checkout@v3
   #  with: {submodules: recursive}
   #- run: git config --system --add safe.directory '*'
    #... so we checkout manually:
    - name: checkout
      run:: bash('gcc-checkout')
    - run: c4core-install ${{matrix.cxx}}
    - name: show info
      run: source .github/setenv.sh && c4_show_info

    - name: shared64-configure-------------------------------------------------
      run: source .github/setenv.sh && c4_cfg_test shared64
    - name: shared64-build
      run: source .github/setenv.sh && c4_build_test shared64
    - name: shared64-run
      run: source .github/setenv.sh && c4_run_test shared64
    - name: shared64-pack
      run: source .github/setenv.sh && c4_package shared64

    - name: static64-configure-------------------------------------------------
      run: source .github/setenv.sh && c4_cfg_test static64
    - name: static64-build
      run: source .github/setenv.sh && c4_build_test static64
    - name: static64-run
      run: source .github/setenv.sh && c4_run_test static64
    - name: static64-pack
      run: source .github/setenv.sh && c4_package static64

    - name: static32-configure-------------------------------------------------
      run: source .github/setenv.sh && c4_cfg_test static32
    - name: static32-build
      run: source .github/setenv.sh && c4_build_test static32
    - name: static32-run
      run: source .github/setenv.sh && c4_run_test static32
    - name: static32-pack
      run: source .github/setenv.sh && c4_package static32

    - name: shared32-configure-------------------------------------------------
      run: source .github/setenv.sh && c4_cfg_test shared32
    - name: shared32-build
      run: source .github/setenv.sh && c4_build_test shared32
    - name: shared32-run
      run: source .github/setenv.sh && c4_run_test shared32
    - name: shared32-pack
      run: source .github/setenv.sh && c4_package shared32

  #----------------------------------------------------------------------------
  gcc_extended:
    name::
     -'gcc_extended/${{matrix.cxx}}/c++${{matrix.std}}/' +
      '${{matrix.bt}}/vg${{matrix.vg}}'
    continue-on-error: true
    if: always()
    runs-on: ubuntu-latest
    container: ghcr.io/biojppm/c4core/${{matrix.img}}:latest

    strategy:
      fail-fast: false
      matrix:
        item-vg =: \({:std %1, :cxx "g++-$a(%2)", :bt %3, :vg 'ON', :img %4})
        item =: \({:std 11, :cxx "g++-$a(%1)", :bt %2 :img %3})
        include:
        # VALGRIND
        - ! item-vg(11 14 'Debug'   'ubuntu22.04')
        - ! item-vg(11 14 'Release' 'ubuntu22.04')
        - ! item-vg(14 14 'Debug'   'ubuntu22.04')
        - ! item-vg(14 14 'Release' 'ubuntu22.04')
        - ! item-vg(17 14 'Debug'   'ubuntu22.04')
        - ! item-vg(17 14 'Release' 'ubuntu22.04')
        - ! item-vg(20 14 'Debug'   'ubuntu22.04')
        - ! item-vg(20 14 'Release' 'ubuntu22.04')

        - ! item(13 'Debug'   'ubuntu22.04')
        - ! item(13 'Release' 'ubuntu22.04')
        - ! item(13 'Debug'   'ubuntu22.04')  # XXX Duplicate?
        - ! item(13 'Release' 'ubuntu22.04')  # XXX Duplicate?
        - ! item(11 'Debug'   'ubuntu22.04')
        - ! item(11 'Release' 'ubuntu22.04')
        - ! item(10 'Debug'   'ubuntu22.04')
        - ! item(10 'Release' 'ubuntu22.04')
        - ! item( 9 'Debug'   'ubuntu22.04')
        - ! item( 9 'Release' 'ubuntu22.04')
        - ! item( 8 'Debug'   'ubuntu18.04')
        - ! item( 8 'Release' 'ubuntu18.04')
        - ! item( 7 'Debug'   'ubuntu18.04')
        - ! item( 7 'Release' 'ubuntu18.04')
        - ! item( 6 'Debug'   'ubuntu18.04')
        - ! item( 6 'Release' 'ubuntu18.04')
        - ! item( 5 'Debug'   'ubuntu18.04')
        - ! item( 5 'Release' 'ubuntu18.04')
        - ! item(4.9 'Debug'   'ubuntu18.04')
        - ! item(4.9 'Release' 'ubuntu18.04')
        - ! item(4.8 'Debug'   'ubuntu18.04')
        - ! item(4.8 'Release' 'ubuntu18.04')

    env:: load('share/env.yaml')

    steps:: gcc-setup + common-steps

  #----------------------------------------------------------------------------
  gccsan:
    name:
      gccsan/${{matrix.cxx}}/c++${{matrix.std}}/${{matrix.bt}}/vg${{matrix.vg}}
    continue-on-error: true
    if: always()
    runs-on: ubuntu-latest
    container: ghcr.io/biojppm/c4core/ubuntu22.04:latest

    strategy:
      fail-fast: false
      matrix:
        include::
          ? for
              san qw(asan lsan tsan ubsan)
              std [11 14 17 20]
          : ! { std:: std, cxx: g++-14, bt:: san, bitlinks: static64 }

    env:: load('share/env.yaml')

    steps:
    - name: checkout
      uses: actions/checkout@v4
      with: {submodules: recursive}
    - run: git config --system --add safe.directory '*'
    - run: c4core-install ${{matrix.cxx}}
    - name: show info
      run: source .github/setenv.sh && c4_show_info

    - name: shared64-configure-------------------------------------------------
      run: source .github/setenv.sh && c4_cfg_test shared64
    - name: shared64-build
      run: source .github/setenv.sh && c4_build_test shared64
    - name: shared64-run
      run: source .github/setenv.sh && c4_run_test shared64
    - name: shared64-pack
      run: source .github/setenv.sh && c4_package shared64

    - name: static64-configure-------------------------------------------------
      run: source .github/setenv.sh && c4_cfg_test static64
    - name: static64-build
      run: source .github/setenv.sh && c4_build_test static64
    - name: static64-run
      run: source .github/setenv.sh && c4_run_test static64
    - name: static64-pack
      run: source .github/setenv.sh && c4_package static64

    - name: static32-configure-------------------------------------------------
      run: source .github/setenv.sh && c4_cfg_test static32
    - name: static32-build
      run: source .github/setenv.sh && c4_build_test static32
    - name: static32-run
      run: source .github/setenv.sh && c4_run_test static32
    - name: static32-pack
      run: source .github/setenv.sh && c4_package static32

    - name: shared32-configure-------------------------------------------------
      run: source .github/setenv.sh && c4_cfg_test shared32
    - name: shared32-build
      run: source .github/setenv.sh && c4_build_test shared32
    - name: shared32-run
      run: source .github/setenv.sh && c4_run_test shared32
    - name: shared32-pack
      run: source .github/setenv.sh && c4_package shared32

  #----------------------------------------------------------------------------
  arm:
    continue-on-error: true
    if: always()
    runs-on: ubuntu-latest
    container: ghcr.io/biojppm/c4core/ubuntu18.04:latest

    strategy:
      fail-fast: false
      matrix:
        item =:
          \({:std %1, :bt %2,
             :toolchain 'ext/c4core/cmake/Toolchain-Arm-ubuntu.cmake',
             :cxx 'arm-linux-gnueabihf-gcc', :os 'ubuntu-20.04'})
        include:
        # these jobs take much longer, so run only one bitlink pair per job to
        # profit from parallelism
        - ! item(11 'Debug')
        - ! item(11 'Release')
        - ! item(14 'Debug')
        - ! item(14 'Release')
        - ! item(17 'Debug')
        - ! item(17 'Release')

    env:: -{'TOOLCHAIN' '${{matrix.toolchain}}'} + load('share/env.yaml')

    steps:
    # version
   #- name: checkout
   #  uses: actions/checkout@v3
   #  with: {submodules: recursive}
   #- run: git config --system --add safe.directory '*'
    - name: checkout
      run:: bash('gcc-checkout')
    - name: install gcc-arm-linux-gnueabihf
      run:
        c4core-install arm-linux-gnueabihf;
        c4core-install qemu
    - name: show info
      run: source .github/setenv.sh && c4_show_info
    - name: configure---------------------------------------------------
      run: source .github/setenv.sh && c4_cfg_test arm
    - name: build
      run: source .github/setenv.sh && c4_build_test arm
    - name: run
      run: source .github/setenv.sh && c4_run_test arm
    - name: pack
      run: source .github/setenv.sh && c4_package arm
