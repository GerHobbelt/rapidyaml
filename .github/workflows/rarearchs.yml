# DO NOT EDIT - GENERATED FROM .github/workflows/rarearchs.ys

name: rarearchs
defaults:
  run:
    shell: bash -e -x {0}
'on':
  workflow_dispatch: null
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
env:
  PROJ_PFX_TARGET: ryml-
  PROJ_PFX_CMAKE: RYML_
  CMAKE_FLAGS: -DRYML_TEST_SUITE=ON
  NUM_JOBS_BUILD: null
jobs:
  rarearchs:
    if: |
      (!contains(github.event.head_commit.message, 'skip all')) ||
      (!contains(github.event.head_commit.message, 'skip rarearchs')) ||
      contains(github.event.head_commit.message, 'only rarearchs')
    continue-on-error: true
    name: ${{matrix.arch}}/c++${{matrix.std}}/${{matrix.bt}}
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
        - std: 11
          bt: Debug
          arch: aarch64
        - std: 11
          bt: Release
          arch: aarch64
        - std: 14
          bt: Debug
          arch: aarch64
        - std: 14
          bt: Release
          arch: aarch64
        - std: 17
          bt: Debug
          arch: aarch64
        - std: 17
          bt: Release
          arch: aarch64
        - std: 11
          bt: Debug
          arch: ppc64le
        - std: 11
          bt: Release
          arch: ppc64le
        - std: 14
          bt: Debug
          arch: ppc64le
        - std: 14
          bt: Release
          arch: ppc64le
        - std: 17
          bt: Debug
          arch: ppc64le
        - std: 17
          bt: Release
          arch: ppc64le
        - std: 11
          bt: Debug
          arch: s390x
        - std: 11
          bt: Release
          arch: s390x
        - std: 14
          bt: Debug
          arch: s390x
        - std: 14
          bt: Release
          arch: s390x
        - std: 17
          bt: Debug
          arch: s390x
        - std: 17
          bt: Release
          arch: s390x
    steps:
    - name: checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0
    - name: test
      uses: uraimo/run-on-arch-action@v2.8.1
      with:
        arch: ${{matrix.arch}}
        distro: ubuntu22.04
        install: |
          set -x
          start_time=$SECONDS
          time apt-get update -y
          time apt-get install -y \
            git \
            build-essential
          # arm platforms need an up-to-date cmake:
          # https://gitlab.kitware.com/cmake/cmake/-/issues/20568
          if [ "${{matrix.arch}}" == "armv6" ] || [ "${{matrix.arch}}" == "armv7" ] ; then
            time apt-get install -y \
              gpg \
              wget \
              apt-transport-https
            wget --no-check-certificate -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
            echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main' | tee /etc/apt/sources.list.d/kitware.list >/dev/null
            time apt-get update -y
            rm /usr/share/keyrings/kitware-archive-keyring.gpg
            time apt-get install kitware-archive-keyring
            time apt-get update -y
          fi
          time apt-get install -y cmake cmake-data
          cmake --version
          echo "install took $((SECONDS - start_time))"
        run: |
          set -x
          start_time=$SECONDS
          uname -a
          pwd
          ls -lFhp .
          #
          bdir=build_${{matrix.arch}}_${{matrix.bt}}_${{matrix.std}}
          idir=install_${{matrix.arch}}_${{matrix.bt}}_${{matrix.std}}
          mkdir -p $bdir
          #
          time cmake -S . -B $bdir \
            -DCMAKE_INSTALL_PREFIX=$idir \
            -DCMAKE_BUILD_TYPE=${{matrix.bt}} \
            -DC4_CXX_STANDARD=${{matrix.std}} \
            -DCXX_STANDARD=${{matrix.std}} \
            -DRYML_DEV=ON \
            -DRYML_TEST_SUITE=ON \
            -DRYML_BUILD_BENCHMARKS=OFF \
            -DRYML_SANITIZE=OFF \
            -DRYML_LINT=OFF \
            -DRYML_VALGRIND=OFF
          #
          time cmake --build $bdir -j 3 --target ryml-test-build
          #
          time cmake --build $bdir -j 3 --target ryml-test-run
          echo "run took $((SECONDS - start_time))"
